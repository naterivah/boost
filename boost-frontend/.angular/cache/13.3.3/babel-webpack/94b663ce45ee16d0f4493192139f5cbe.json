{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { tap } from 'rxjs/operators';\nimport { environment } from \"../../environments/environment\";\nimport { Subject } from \"rxjs\";\nimport { EventSourcePolyfill } from 'event-source-polyfill';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n/**\n * @author Nordine Bittich\n */\n\nexport class AuthenticationService {\n  http;\n  userEvent = new Subject();\n\n  constructor(http) {\n    this.http = http;\n  }\n\n  notificationConnect(callback, error = err => console.log(err)) {\n    let source = new EventSourcePolyfill(environment.backendUrl + '/notification/notify', {\n      headers: this.getTokenHeader()\n    });\n    source.addEventListener('error', error);\n    source.addEventListener('message', message => {\n      if (!this.isLoggedIn()) {\n        console.log('logged out');\n        source.close();\n      }\n\n      callback(message);\n    });\n  }\n\n  autoLogin(sendEvent = false) {\n    this.http.request('post', environment.backendUrl + '/user/info', {}).subscribe(datas => {\n      this.setUser(datas, sendEvent);\n    }, err => {\n      console.log(err);\n    }, () => {});\n  }\n\n  setUser(datas, sendEvent = true) {\n    localStorage.setItem('user', JSON.stringify(datas));\n    if (sendEvent) this.userEvent.next(\"login\");\n  }\n\n  login(username, password, callBackNext, callbackError, callbackComplete) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'X-Requested-With': 'XMLHttpRequest',\n      'Authorization': 'Basic ' + window.btoa(username + ':' + password)\n    });\n    return this.http.post(environment.backendUrl + '/user/info', {}, {\n      headers: headers,\n      observe: 'response'\n    }).pipe(tap(resp => {\n      const token = resp.headers.get('X-Auth-Token');\n      console.log(token);\n\n      if (token && token.length) {\n        localStorage.setItem('xAuthToken', token);\n        this.setUser(resp.body);\n      }\n\n      return resp;\n    })).subscribe(datas => {\n      if (callBackNext) callBackNext(datas);\n    }, err => {\n      if (callbackError) callbackError(err);\n    }, () => {\n      if (callbackComplete) callbackComplete();\n    });\n  }\n\n  getUser() {\n    const user = localStorage.getItem('user');\n    return user && user.length ? JSON.parse(user) : null;\n  }\n\n  hasRole(expectedRole) {\n    const user = this.getUser() || {\n      authorities: [{\n        authority: 'ANONYMOUS'\n      }]\n    };\n    const authorities = user.authorities || [{\n      authority: 'ANONYMOUS'\n    }];\n    return expectedRole.some(r => authorities.map(a => a.authority.toLowerCase()).includes(r.toLowerCase()));\n  }\n\n  hasRight(entityFromUser) {\n    return (entityFromUser || {\n      username: 'ERROR'\n    }).username === (this.getUser() || {\n      username: 'ANONYMOUS'\n    }).username;\n  }\n\n  hasAnyRole(...expected) {\n    return expected.filter(e => this.hasRole([e])).length > 0;\n  }\n\n  logout() {\n    localStorage.removeItem('xAuthToken');\n    localStorage.removeItem('user');\n    this.userEvent.next(\"logout\");\n  }\n\n  isLoggedIn() {\n    return this.getUser() !== null;\n  }\n\n  getTokenHeader() {\n    const xAuthToken = localStorage.getItem('xAuthToken');\n\n    if (xAuthToken && xAuthToken.length) {\n      return {\n        'x-auth-token': `${xAuthToken}`\n      };\n    } else {\n      console.log('not authenticated');\n      this.logout();\n      return null;\n    }\n  }\n\n  static ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":null,"metadata":{},"sourceType":"module"}