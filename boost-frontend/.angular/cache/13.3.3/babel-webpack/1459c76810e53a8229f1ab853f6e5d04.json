{"ast":null,"code":"import { Directive, ElementRef, Input, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n/**\n * # Ways to turn off autofocus: any js-falsely value, except empty string\n *\n *     <!-- with data binding -->\n *     <input [autofocus]=\"\"> <!-- undefined value -->\n *     <input [autofocus]=\"undefined\">\n *     <input [autofocus]=\"false\">\n *     <input [autofocus]=\"null\">\n *     <input [autofocus]=\"0\">\n *\n *     <!-- without data binding -->\n *     <input autofocus=\"undefined\">\n *     <input autofocus=\"false\">\n *     <input autofocus=\"null\">\n *     <input autofocus=\"0\">\n *\n *     <input> <!-- disabled by default -->\n *\n *\n * # Ways to enable autofocus: any js-true value and empty string\n *\n *\n *     <!-- empty string will enable autofocus, this is default html behavior -->\n *     <input [autofocus]=\"''\">\n *     <input autofocus=\"\">\n *     <input autofocus>\n *\n *     <input [autofocus]=\"true\">\n *     <input autofocus=\"true\">\n *\n *     <input [autofocus]=\"'any other values'\">\n *\n */\n\nvar AutofocusDirective = function () {\n  /**\n   * @param {?} el\n   */\n  function AutofocusDirective(el) {\n    this.el = el;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  AutofocusDirective.prototype.ngAfterViewInit = function () {\n    if (this._autofocus) {\n      var\n      /** @type {?} */\n      el = this.el.nativeElement;\n\n      if (el.focus) {\n        el.focus();\n      } else {\n        console.warn('AutofocusDirective: There is no .focus() method on the element:', this.el.nativeElement);\n      }\n    }\n  };\n\n  Object.defineProperty(AutofocusDirective.prototype, \"autofocus\", {\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set: function (value) {\n      this._autofocus = value !== false && value !== null && value !== undefined && value !== 0 && value !== 'false' && value !== 'null' && value !== 'undefined' && value !== '0';\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return AutofocusDirective;\n}();\n\nAutofocusDirective.decorators = [{\n  type: Directive,\n  args: [{\n    selector: '[autofocus]'\n  }]\n}];\n/**\n * @nocollapse\n */\n\nAutofocusDirective.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }];\n};\n\nAutofocusDirective.propDecorators = {\n  'autofocus': [{\n    type: Input\n  }]\n};\n\nvar AutofocusModule = function () {\n  function AutofocusModule() {}\n  /**\n   * @return {?}\n   */\n\n\n  AutofocusModule.forRoot = function () {\n    return {\n      ngModule: AutofocusModule\n    };\n  };\n\n  return AutofocusModule;\n}();\n\nAutofocusModule.decorators = [{\n  type: NgModule,\n  args: [{\n    imports: [CommonModule],\n    declarations: [AutofocusDirective],\n    exports: [AutofocusDirective]\n  }]\n}];\n/**\n * @nocollapse\n */\n\nAutofocusModule.ctorParameters = function () {\n  return [];\n};\n\nexport { AutofocusModule, AutofocusDirective };","map":null,"metadata":{},"sourceType":"module"}