{"ast":null,"code":"import { environment } from \"../../environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../service/updatecurrenttimeservice\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../service/authenticationservice\";\nimport * as i4 from \"@angular/common\";\nconst _c0 = [\"audioSource\"];\n\nfunction AudioPlayerComponent_div_0_a_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"a\", 6);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"routerLink\", ctx_r1.linkDetail);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r1.title);\n  }\n}\n\nfunction AudioPlayerComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵtemplate(1, AudioPlayerComponent_div_0_a_1_Template, 2, 2, \"a\", 2);\n    i0.ɵɵelementStart(2, \"audio\", 3, 4);\n    i0.ɵɵlistener(\"playing\", function AudioPlayerComponent_div_0_Template_audio_playing_2_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.propagatePlayingEvent($event);\n    })(\"pause\", function AudioPlayerComponent_div_0_Template_audio_pause_2_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.propagatePauseEvent($event);\n    });\n    i0.ɵɵelement(4, \"source\", 5);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.showTitle);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"id\", ctx_r0.upload.id + ctx_r0.currentPlayer)(\"ngClass\", \"bg-transparent pr-3  text-muted\" + ctx_r0.width ? \"w-\" + ctx_r0.width : \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"src\", ctx_r0.getSource(), i0.ɵɵsanitizeUrl);\n  }\n}\n\nexport class AudioPlayerComponent {\n  updateCurrentTimeService;\n  router;\n  cd;\n  authenticationService;\n  audioSource;\n  static audioSources = []; // todo use redux like solution\n\n  static currentPlayerMgmt; // todo use redux like solution\n\n  constructor(updateCurrentTimeService, router, cd, authenticationService) {\n    this.updateCurrentTimeService = updateCurrentTimeService;\n    this.router = router;\n    this.cd = cd;\n    this.authenticationService = authenticationService;\n  }\n\n  updateCurrentTimeInterval;\n  updateCurrentTimeUrl = null;\n  currentTime = 0;\n  width;\n  currentPlayer;\n  linkDetail;\n  upload;\n  title;\n  showTitle = true;\n  showPlayer = true;\n\n  isLoggedIn() {\n    return this.authenticationService.getUser() !== null;\n  }\n\n  getSource() {\n    return AudioPlayerComponent.getSourceById(this.upload.id);\n  }\n\n  ngAfterViewInit() {\n    this.setCurrentTime(this.currentTime);\n\n    if (this.currentPlayer) {\n      AudioPlayerComponent.currentPlayerMgmt = this;\n    }\n  }\n\n  ngOnInit() {\n    AudioPlayerComponent.audioSources.push(this);\n  }\n\n  propagatePlayingEvent(event) {\n    console.log('playing:', event);\n    AudioPlayerComponent.audioSources.filter(a => a.audioSource.nativeElement.id !== this.audioSource.nativeElement.id).forEach(a => {\n      a.audioSource.nativeElement.pause();\n    });\n    this.updateCurrentTimeInterval = setInterval(() => {\n      if (this.updateCurrentTimeUrl && this.audioSource && this.audioSource.nativeElement) {\n        let currentT = this.audioSource.nativeElement.currentTime;\n\n        if (!this.isLoggedIn()) {\n          clearInterval(this.updateCurrentTimeInterval);\n        }\n\n        this.updateCurrentTimeService.updateTime(this.updateCurrentTimeUrl, currentT);\n      } else {\n        clearInterval(this.updateCurrentTimeInterval);\n      }\n    }, 10000);\n  }\n\n  static getSourceById(id) {\n    return environment.backendUrl + '/upload/' + id;\n  }\n\n  static reloadCurrentPlayer(newId, title) {\n    let currentPlayerMgmt = AudioPlayerComponent.currentPlayerMgmt;\n\n    if (currentPlayerMgmt) {\n      try {\n        if (newId) {\n          console.log(\"new\" + newId);\n          let audioSource = currentPlayerMgmt.audioSource;\n          currentPlayerMgmt.title = title;\n          audioSource.nativeElement.src = AudioPlayerComponent.getSourceById(newId);\n          audioSource.nativeElement.pause();\n        } else {\n          AudioPlayerComponent.currentPlayerMgmt.upload = null;\n        }\n      } catch (e) {\n        console.log(\"error handled \", e);\n        AudioPlayerComponent.currentPlayerMgmt.upload = null;\n      }\n    }\n  }\n\n  propagatePauseEvent($event) {\n    console.log('paused');\n\n    if (this.updateCurrentTimeInterval) {\n      clearInterval(this.updateCurrentTimeInterval);\n      this.updateCurrentTimeInterval = null;\n    }\n  }\n\n  setCurrentTime(time) {\n    this.audioSource.nativeElement.currentTime = time;\n  }\n\n  static ɵfac = function AudioPlayerComponent_Factory(t) {\n    return new (t || AudioPlayerComponent)(i0.ɵɵdirectiveInject(i1.UpdateCurrentTimeService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.AuthenticationService));\n  };\n  static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AudioPlayerComponent,\n    selectors: [[\"app-audio-player\"]],\n    viewQuery: function AudioPlayerComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.audioSource = _t.first);\n      }\n    },\n    inputs: {\n      updateCurrentTimeUrl: \"updateCurrentTimeUrl\",\n      currentTime: \"currentTime\",\n      width: \"width\",\n      currentPlayer: \"currentPlayer\",\n      linkDetail: \"linkDetail\",\n      upload: \"upload\",\n      title: \"title\",\n      showTitle: \"showTitle\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[\"class\", \"form-group mr-2\", 4, \"ngIf\"], [1, \"form-group\", \"mr-2\"], [\"class\", \"badge label text-link text-muted text-warning text-uppercase mr-2 \", 3, \"routerLink\", 4, \"ngIf\"], [\"controls\", \"\", 3, \"id\", \"ngClass\", \"playing\", \"pause\"], [\"audioSource\", \"\"], [3, \"src\"], [1, \"badge\", \"label\", \"text-link\", \"text-muted\", \"text-warning\", \"text-uppercase\", \"mr-2\", 3, \"routerLink\"]],\n    template: function AudioPlayerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, AudioPlayerComponent_div_0_Template, 5, 4, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.showPlayer && ctx.upload);\n      }\n    },\n    directives: [i4.NgIf, i2.RouterLinkWithHref, i4.NgClass],\n    styles: [\"audio[_ngcontent-%COMP%]{height:32px;outline:none}\"]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}