{"ast":null,"code":"/** @license\r\n * eventsource.js\r\n * Available under MIT License (MIT)\r\n * https://github.com/Yaffle/EventSource/\r\n */\n\n/*jslint indent: 2, vars: true, plusplus: true */\n\n/*global setTimeout, clearTimeout */\n(function (global) {\n  \"use strict\";\n\n  var setTimeout = global.setTimeout;\n  var clearTimeout = global.clearTimeout;\n  var XMLHttpRequest = global.XMLHttpRequest;\n  var XDomainRequest = global.XDomainRequest;\n  var ActiveXObject = global.ActiveXObject;\n  var NativeEventSource = global.EventSource;\n  var document = global.document;\n  var Promise = global.Promise;\n  var fetch = global.fetch;\n  var Response = global.Response;\n  var TextDecoder = global.TextDecoder;\n  var TextEncoder = global.TextEncoder;\n  var AbortController = global.AbortController;\n\n  if (typeof window !== \"undefined\" && typeof document !== \"undefined\" && !(\"readyState\" in document) && document.body == null) {\n    // Firefox 2\n    document.readyState = \"loading\";\n    window.addEventListener(\"load\", function (event) {\n      document.readyState = \"complete\";\n    }, false);\n  }\n\n  if (XMLHttpRequest == null && ActiveXObject != null) {\n    // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest_in_IE6\n    XMLHttpRequest = function () {\n      return new ActiveXObject(\"Microsoft.XMLHTTP\");\n    };\n  }\n\n  if (Object.create == undefined) {\n    Object.create = function (C) {\n      function F() {}\n\n      F.prototype = C;\n      return new F();\n    };\n  }\n\n  if (!Date.now) {\n    Date.now = function now() {\n      return new Date().getTime();\n    };\n  } // see #118 (Promise#finally with polyfilled Promise)\n  // see #123 (data URLs crash Edge)\n  // see #125 (CSP violations)\n  // see pull/#138\n  // => No way to polyfill Promise#finally\n\n\n  if (AbortController == undefined) {\n    var originalFetch2 = fetch;\n\n    fetch = function (url, options) {\n      var signal = options.signal;\n      return originalFetch2(url, {\n        headers: options.headers,\n        credentials: options.credentials,\n        cache: options.cache\n      }).then(function (response) {\n        var reader = response.body.getReader();\n        signal._reader = reader;\n\n        if (signal._aborted) {\n          signal._reader.cancel();\n        }\n\n        return {\n          status: response.status,\n          statusText: response.statusText,\n          headers: response.headers,\n          body: {\n            getReader: function () {\n              return reader;\n            }\n          }\n        };\n      });\n    };\n\n    AbortController = function () {\n      this.signal = {\n        _reader: null,\n        _aborted: false\n      };\n\n      this.abort = function () {\n        if (this.signal._reader != null) {\n          this.signal._reader.cancel();\n        }\n\n        this.signal._aborted = true;\n      };\n    };\n  }\n\n  function TextDecoderPolyfill() {\n    this.bitsNeeded = 0;\n    this.codePoint = 0;\n  }\n\n  TextDecoderPolyfill.prototype.decode = function (octets) {\n    function valid(codePoint, shift, octetsCount) {\n      if (octetsCount === 1) {\n        return codePoint >= 0x0080 >> shift && codePoint << shift <= 0x07FF;\n      }\n\n      if (octetsCount === 2) {\n        return codePoint >= 0x0800 >> shift && codePoint << shift <= 0xD7FF || codePoint >= 0xE000 >> shift && codePoint << shift <= 0xFFFF;\n      }\n\n      if (octetsCount === 3) {\n        return codePoint >= 0x010000 >> shift && codePoint << shift <= 0x10FFFF;\n      }\n\n      throw new Error();\n    }\n\n    function octetsCount(bitsNeeded, codePoint) {\n      if (bitsNeeded === 6 * 1) {\n        return codePoint >> 6 > 15 ? 3 : codePoint > 31 ? 2 : 1;\n      }\n\n      if (bitsNeeded === 6 * 2) {\n        return codePoint > 15 ? 3 : 2;\n      }\n\n      if (bitsNeeded === 6 * 3) {\n        return 3;\n      }\n\n      throw new Error();\n    }\n\n    var REPLACER = 0xFFFD;\n    var string = \"\";\n    var bitsNeeded = this.bitsNeeded;\n    var codePoint = this.codePoint;\n\n    for (var i = 0; i < octets.length; i += 1) {\n      var octet = octets[i];\n\n      if (bitsNeeded !== 0) {\n        if (octet < 128 || octet > 191 || !valid(codePoint << 6 | octet & 63, bitsNeeded - 6, octetsCount(bitsNeeded, codePoint))) {\n          bitsNeeded = 0;\n          codePoint = REPLACER;\n          string += String.fromCharCode(codePoint);\n        }\n      }\n\n      if (bitsNeeded === 0) {\n        if (octet >= 0 && octet <= 127) {\n          bitsNeeded = 0;\n          codePoint = octet;\n        } else if (octet >= 192 && octet <= 223) {\n          bitsNeeded = 6 * 1;\n          codePoint = octet & 31;\n        } else if (octet >= 224 && octet <= 239) {\n          bitsNeeded = 6 * 2;\n          codePoint = octet & 15;\n        } else if (octet >= 240 && octet <= 247) {\n          bitsNeeded = 6 * 3;\n          codePoint = octet & 7;\n        } else {\n          bitsNeeded = 0;\n          codePoint = REPLACER;\n        }\n\n        if (bitsNeeded !== 0 && !valid(codePoint, bitsNeeded, octetsCount(bitsNeeded, codePoint))) {\n          bitsNeeded = 0;\n          codePoint = REPLACER;\n        }\n      } else {\n        bitsNeeded -= 6;\n        codePoint = codePoint << 6 | octet & 63;\n      }\n\n      if (bitsNeeded === 0) {\n        if (codePoint <= 0xFFFF) {\n          string += String.fromCharCode(codePoint);\n        } else {\n          string += String.fromCharCode(0xD800 + (codePoint - 0xFFFF - 1 >> 10));\n          string += String.fromCharCode(0xDC00 + (codePoint - 0xFFFF - 1 & 0x3FF));\n        }\n      }\n    }\n\n    this.bitsNeeded = bitsNeeded;\n    this.codePoint = codePoint;\n    return string;\n  }; // Firefox < 38 throws an error with stream option\n\n\n  var supportsStreamOption = function () {\n    try {\n      return new TextDecoder().decode(new TextEncoder().encode(\"test\"), {\n        stream: true\n      }) === \"test\";\n    } catch (error) {\n      console.debug(\"TextDecoder does not support streaming option. Using polyfill instead: \" + error);\n    }\n\n    return false;\n  }; // IE, Edge\n\n\n  if (TextDecoder == undefined || TextEncoder == undefined || !supportsStreamOption()) {\n    TextDecoder = TextDecoderPolyfill;\n  }\n\n  var k = function () {};\n\n  function XHRWrapper(xhr) {\n    this.withCredentials = false;\n    this.readyState = 0;\n    this.status = 0;\n    this.statusText = \"\";\n    this.responseText = \"\";\n    this.onprogress = k;\n    this.onload = k;\n    this.onerror = k;\n    this.onreadystatechange = k;\n    this._contentType = \"\";\n    this._xhr = xhr;\n    this._sendTimeout = 0;\n    this._abort = k;\n  }\n\n  XHRWrapper.prototype.open = function (method, url) {\n    this._abort(true);\n\n    var that = this;\n    var xhr = this._xhr;\n    var state = 1;\n    var timeout = 0;\n\n    this._abort = function (silent) {\n      if (that._sendTimeout !== 0) {\n        clearTimeout(that._sendTimeout);\n        that._sendTimeout = 0;\n      }\n\n      if (state === 1 || state === 2 || state === 3) {\n        state = 4;\n        xhr.onload = k;\n        xhr.onerror = k;\n        xhr.onabort = k;\n        xhr.onprogress = k;\n        xhr.onreadystatechange = k; // IE 8 - 9: XDomainRequest#abort() does not fire any event\n        // Opera < 10: XMLHttpRequest#abort() does not fire any event\n\n        xhr.abort();\n\n        if (timeout !== 0) {\n          clearTimeout(timeout);\n          timeout = 0;\n        }\n\n        if (!silent) {\n          that.readyState = 4;\n          that.onabort(null);\n          that.onreadystatechange();\n        }\n      }\n\n      state = 0;\n    };\n\n    var onStart = function () {\n      if (state === 1) {\n        //state = 2;\n        var status = 0;\n        var statusText = \"\";\n        var contentType = undefined;\n\n        if (!(\"contentType\" in xhr)) {\n          try {\n            status = xhr.status;\n            statusText = xhr.statusText;\n            contentType = xhr.getResponseHeader(\"Content-Type\");\n          } catch (error) {\n            // IE < 10 throws exception for `xhr.status` when xhr.readyState === 2 || xhr.readyState === 3\n            // Opera < 11 throws exception for `xhr.status` when xhr.readyState === 2\n            // https://bugs.webkit.org/show_bug.cgi?id=29121\n            status = 0;\n            statusText = \"\";\n            contentType = undefined; // Firefox < 14, Chrome ?, Safari ?\n            // https://bugs.webkit.org/show_bug.cgi?id=29658\n            // https://bugs.webkit.org/show_bug.cgi?id=77854\n          }\n        } else {\n          status = 200;\n          statusText = \"OK\";\n          contentType = xhr.contentType;\n        }\n\n        if (status !== 0) {\n          state = 2;\n          that.readyState = 2;\n          that.status = status;\n          that.statusText = statusText;\n          that._contentType = contentType;\n          that.onreadystatechange();\n        }\n      }\n    };\n\n    var onProgress = function () {\n      onStart();\n\n      if (state === 2 || state === 3) {\n        state = 3;\n        var responseText = \"\";\n\n        try {\n          responseText = xhr.responseText;\n        } catch (error) {// IE 8 - 9 with XMLHttpRequest\n        }\n\n        that.readyState = 3;\n        that.responseText = responseText;\n        that.onprogress();\n      }\n    };\n\n    var onFinish = function (type, event) {\n      if (event == null || event.preventDefault == null) {\n        event = {\n          preventDefault: k\n        };\n      } // Firefox 52 fires \"readystatechange\" (xhr.readyState === 4) without final \"readystatechange\" (xhr.readyState === 3)\n      // IE 8 fires \"onload\" without \"onprogress\"\n\n\n      onProgress();\n\n      if (state === 1 || state === 2 || state === 3) {\n        state = 4;\n\n        if (timeout !== 0) {\n          clearTimeout(timeout);\n          timeout = 0;\n        }\n\n        that.readyState = 4;\n\n        if (type === \"load\") {\n          that.onload(event);\n        } else if (type === \"error\") {\n          that.onerror(event);\n        } else if (type === \"abort\") {\n          that.onabort(event);\n        } else {\n          throw new TypeError();\n        }\n\n        that.onreadystatechange();\n      }\n    };\n\n    var onReadyStateChange = function (event) {\n      if (xhr != undefined) {\n        // Opera 12\n        if (xhr.readyState === 4) {\n          if (!(\"onload\" in xhr) || !(\"onerror\" in xhr) || !(\"onabort\" in xhr)) {\n            onFinish(xhr.responseText === \"\" ? \"error\" : \"load\", event);\n          }\n        } else if (xhr.readyState === 3) {\n          if (!(\"onprogress\" in xhr)) {\n            // testing XMLHttpRequest#responseText too many times is too slow in IE 11\n            // and in Firefox 3.6\n            onProgress();\n          }\n        } else if (xhr.readyState === 2) {\n          onStart();\n        }\n      }\n    };\n\n    var onTimeout = function () {\n      timeout = setTimeout(function () {\n        onTimeout();\n      }, 500);\n\n      if (xhr.readyState === 3) {\n        onProgress();\n      }\n    }; // XDomainRequest#abort removes onprogress, onerror, onload\n\n\n    if (\"onload\" in xhr) {\n      xhr.onload = function (event) {\n        onFinish(\"load\", event);\n      };\n    }\n\n    if (\"onerror\" in xhr) {\n      xhr.onerror = function (event) {\n        onFinish(\"error\", event);\n      };\n    } // improper fix to match Firefox behaviour, but it is better than just ignore abort\n    // see https://bugzilla.mozilla.org/show_bug.cgi?id=768596\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=880200\n    // https://code.google.com/p/chromium/issues/detail?id=153570\n    // IE 8 fires \"onload\" without \"onprogress\n\n\n    if (\"onabort\" in xhr) {\n      xhr.onabort = function (event) {\n        onFinish(\"abort\", event);\n      };\n    }\n\n    if (\"onprogress\" in xhr) {\n      xhr.onprogress = onProgress;\n    } // IE 8 - 9 (XMLHTTPRequest)\n    // Opera < 12\n    // Firefox < 3.5\n    // Firefox 3.5 - 3.6 - ? < 9.0\n    // onprogress is not fired sometimes or delayed\n    // see also #64 (significant lag in IE 11)\n\n\n    if (\"onreadystatechange\" in xhr) {\n      xhr.onreadystatechange = function (event) {\n        onReadyStateChange(event);\n      };\n    }\n\n    if (\"contentType\" in xhr || !(\"ontimeout\" in XMLHttpRequest.prototype)) {\n      url += (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + \"padding=true\";\n    }\n\n    xhr.open(method, url, true);\n\n    if (\"readyState\" in xhr) {\n      // workaround for Opera 12 issue with \"progress\" events\n      // #91 (XMLHttpRequest onprogress not fired for streaming response in Edge 14-15-?)\n      timeout = setTimeout(function () {\n        onTimeout();\n      }, 0);\n    }\n  };\n\n  XHRWrapper.prototype.abort = function () {\n    this._abort(false);\n  };\n\n  XHRWrapper.prototype.getResponseHeader = function (name) {\n    return this._contentType;\n  };\n\n  XHRWrapper.prototype.setRequestHeader = function (name, value) {\n    var xhr = this._xhr;\n\n    if (\"setRequestHeader\" in xhr) {\n      xhr.setRequestHeader(name, value);\n    }\n  };\n\n  XHRWrapper.prototype.getAllResponseHeaders = function () {\n    // XMLHttpRequest#getAllResponseHeaders returns null for CORS requests in Firefox 3.6.28\n    return this._xhr.getAllResponseHeaders != undefined ? this._xhr.getAllResponseHeaders() || \"\" : \"\";\n  };\n\n  XHRWrapper.prototype.send = function () {\n    // loading indicator in Safari < ? (6), Chrome < 14, Firefox\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=736723\n    if ((!(\"ontimeout\" in XMLHttpRequest.prototype) || !(\"sendAsBinary\" in XMLHttpRequest.prototype) && !(\"mozAnon\" in XMLHttpRequest.prototype)) && document != undefined && document.readyState != undefined && document.readyState !== \"complete\") {\n      var that = this;\n      that._sendTimeout = setTimeout(function () {\n        that._sendTimeout = 0;\n        that.send();\n      }, 4);\n      return;\n    }\n\n    var xhr = this._xhr; // withCredentials should be set after \"open\" for Safari and Chrome (< 19 ?)\n\n    if (\"withCredentials\" in xhr) {\n      xhr.withCredentials = this.withCredentials;\n    }\n\n    try {\n      // xhr.send(); throws \"Not enough arguments\" in Firefox 3.0\n      xhr.send(undefined);\n    } catch (error1) {\n      // Safari 5.1.7, Opera 12\n      throw error1;\n    }\n  };\n\n  function toLowerCase(name) {\n    return name.replace(/[A-Z]/g, function (c) {\n      return String.fromCharCode(c.charCodeAt(0) + 0x20);\n    });\n  }\n\n  function HeadersPolyfill(all) {\n    // Get headers: implemented according to mozilla's example code: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders#Example\n    var map = Object.create(null);\n    var array = all.split(\"\\r\\n\");\n\n    for (var i = 0; i < array.length; i += 1) {\n      var line = array[i];\n      var parts = line.split(\": \");\n      var name = parts.shift();\n      var value = parts.join(\": \");\n      map[toLowerCase(name)] = value;\n    }\n\n    this._map = map;\n  }\n\n  HeadersPolyfill.prototype.get = function (name) {\n    return this._map[toLowerCase(name)];\n  };\n\n  if (XMLHttpRequest != null && XMLHttpRequest.HEADERS_RECEIVED == null) {\n    // IE < 9, Firefox 3.6\n    XMLHttpRequest.HEADERS_RECEIVED = 2;\n  }\n\n  function XHRTransport() {}\n\n  XHRTransport.prototype.open = function (xhr, onStartCallback, onProgressCallback, onFinishCallback, url, withCredentials, headers) {\n    xhr.open(\"GET\", url);\n    var offset = 0;\n\n    xhr.onprogress = function () {\n      var responseText = xhr.responseText;\n      var chunk = responseText.slice(offset);\n      offset += chunk.length;\n      onProgressCallback(chunk);\n    };\n\n    xhr.onerror = function (event) {\n      event.preventDefault();\n      onFinishCallback(new Error(\"NetworkError\"));\n    };\n\n    xhr.onload = function () {\n      onFinishCallback(null);\n    };\n\n    xhr.onabort = function () {\n      onFinishCallback(null);\n    };\n\n    xhr.onreadystatechange = function () {\n      if (xhr.readyState === XMLHttpRequest.HEADERS_RECEIVED) {\n        var status = xhr.status;\n        var statusText = xhr.statusText;\n        var contentType = xhr.getResponseHeader(\"Content-Type\");\n        var headers = xhr.getAllResponseHeaders();\n        onStartCallback(status, statusText, contentType, new HeadersPolyfill(headers));\n      }\n    };\n\n    xhr.withCredentials = withCredentials;\n\n    for (var name in headers) {\n      if (Object.prototype.hasOwnProperty.call(headers, name)) {\n        xhr.setRequestHeader(name, headers[name]);\n      }\n    }\n\n    xhr.send();\n    return xhr;\n  };\n\n  function HeadersWrapper(headers) {\n    this._headers = headers;\n  }\n\n  HeadersWrapper.prototype.get = function (name) {\n    return this._headers.get(name);\n  };\n\n  function FetchTransport() {}\n\n  FetchTransport.prototype.open = function (xhr, onStartCallback, onProgressCallback, onFinishCallback, url, withCredentials, headers) {\n    var reader = null;\n    var controller = new AbortController();\n    var signal = controller.signal;\n    var textDecoder = new TextDecoder();\n    fetch(url, {\n      headers: headers,\n      credentials: withCredentials ? \"include\" : \"same-origin\",\n      signal: signal,\n      cache: \"no-store\"\n    }).then(function (response) {\n      reader = response.body.getReader();\n      onStartCallback(response.status, response.statusText, response.headers.get(\"Content-Type\"), new HeadersWrapper(response.headers)); // see https://github.com/promises-aplus/promises-spec/issues/179\n\n      return new Promise(function (resolve, reject) {\n        var readNextChunk = function () {\n          reader.read().then(function (result) {\n            if (result.done) {\n              //Note: bytes in textDecoder are ignored\n              resolve(undefined);\n            } else {\n              var chunk = textDecoder.decode(result.value, {\n                stream: true\n              });\n              onProgressCallback(chunk);\n              readNextChunk();\n            }\n          })[\"catch\"](function (error) {\n            reject(error);\n          });\n        };\n\n        readNextChunk();\n      });\n    })[\"catch\"](function (error) {\n      if (error.name === \"AbortError\") {\n        return undefined;\n      } else {\n        return error;\n      }\n    }).then(function (error) {\n      onFinishCallback(error);\n    });\n    return {\n      abort: function () {\n        if (reader != null) {\n          reader.cancel(); // https://bugzilla.mozilla.org/show_bug.cgi?id=1583815\n        }\n\n        controller.abort();\n      }\n    };\n  };\n\n  function EventTarget() {\n    this._listeners = Object.create(null);\n  }\n\n  function throwError(e) {\n    setTimeout(function () {\n      throw e;\n    }, 0);\n  }\n\n  EventTarget.prototype.dispatchEvent = function (event) {\n    event.target = this;\n    var typeListeners = this._listeners[event.type];\n\n    if (typeListeners != undefined) {\n      var length = typeListeners.length;\n\n      for (var i = 0; i < length; i += 1) {\n        var listener = typeListeners[i];\n\n        try {\n          if (typeof listener.handleEvent === \"function\") {\n            listener.handleEvent(event);\n          } else {\n            listener.call(this, event);\n          }\n        } catch (e) {\n          throwError(e);\n        }\n      }\n    }\n  };\n\n  EventTarget.prototype.addEventListener = function (type, listener) {\n    type = String(type);\n    var listeners = this._listeners;\n    var typeListeners = listeners[type];\n\n    if (typeListeners == undefined) {\n      typeListeners = [];\n      listeners[type] = typeListeners;\n    }\n\n    var found = false;\n\n    for (var i = 0; i < typeListeners.length; i += 1) {\n      if (typeListeners[i] === listener) {\n        found = true;\n      }\n    }\n\n    if (!found) {\n      typeListeners.push(listener);\n    }\n  };\n\n  EventTarget.prototype.removeEventListener = function (type, listener) {\n    type = String(type);\n    var listeners = this._listeners;\n    var typeListeners = listeners[type];\n\n    if (typeListeners != undefined) {\n      var filtered = [];\n\n      for (var i = 0; i < typeListeners.length; i += 1) {\n        if (typeListeners[i] !== listener) {\n          filtered.push(typeListeners[i]);\n        }\n      }\n\n      if (filtered.length === 0) {\n        delete listeners[type];\n      } else {\n        listeners[type] = filtered;\n      }\n    }\n  };\n\n  function Event(type) {\n    this.type = type;\n    this.target = undefined;\n  }\n\n  function MessageEvent(type, options) {\n    Event.call(this, type);\n    this.data = options.data;\n    this.lastEventId = options.lastEventId;\n  }\n\n  MessageEvent.prototype = Object.create(Event.prototype);\n\n  function ConnectionEvent(type, options) {\n    Event.call(this, type);\n    this.status = options.status;\n    this.statusText = options.statusText;\n    this.headers = options.headers;\n  }\n\n  ConnectionEvent.prototype = Object.create(Event.prototype);\n\n  function ErrorEvent(type, options) {\n    Event.call(this, type);\n    this.error = options.error;\n  }\n\n  ErrorEvent.prototype = Object.create(Event.prototype);\n  var WAITING = -1;\n  var CONNECTING = 0;\n  var OPEN = 1;\n  var CLOSED = 2;\n  var AFTER_CR = -1;\n  var FIELD_START = 0;\n  var FIELD = 1;\n  var VALUE_START = 2;\n  var VALUE = 3;\n  var contentTypeRegExp = /^text\\/event\\-stream(;.*)?$/i;\n  var MINIMUM_DURATION = 1000;\n  var MAXIMUM_DURATION = 18000000;\n\n  var parseDuration = function (value, def) {\n    var n = value == null ? def : parseInt(value, 10);\n\n    if (n !== n) {\n      n = def;\n    }\n\n    return clampDuration(n);\n  };\n\n  var clampDuration = function (n) {\n    return Math.min(Math.max(n, MINIMUM_DURATION), MAXIMUM_DURATION);\n  };\n\n  var fire = function (that, f, event) {\n    try {\n      if (typeof f === \"function\") {\n        f.call(that, event);\n      }\n    } catch (e) {\n      throwError(e);\n    }\n  };\n\n  function EventSourcePolyfill(url, options) {\n    EventTarget.call(this);\n    options = options || {};\n    this.onopen = undefined;\n    this.onmessage = undefined;\n    this.onerror = undefined;\n    this.url = undefined;\n    this.readyState = undefined;\n    this.withCredentials = undefined;\n    this.headers = undefined;\n    this._close = undefined;\n    start(this, url, options);\n  }\n\n  function getBestXHRTransport() {\n    return XMLHttpRequest != undefined && \"withCredentials\" in XMLHttpRequest.prototype || XDomainRequest == undefined ? new XMLHttpRequest() : new XDomainRequest();\n  }\n\n  var isFetchSupported = fetch != undefined && Response != undefined && \"body\" in Response.prototype;\n\n  function start(es, url, options) {\n    url = String(url);\n    var withCredentials = Boolean(options.withCredentials);\n    var lastEventIdQueryParameterName = options.lastEventIdQueryParameterName || \"lastEventId\";\n    var initialRetry = clampDuration(1000);\n    var heartbeatTimeout = parseDuration(options.heartbeatTimeout, 45000);\n    var lastEventId = \"\";\n    var retry = initialRetry;\n    var wasActivity = false;\n    var textLength = 0;\n    var headers = options.headers || {};\n    var TransportOption = options.Transport;\n    var xhr = isFetchSupported && TransportOption == undefined ? undefined : new XHRWrapper(TransportOption != undefined ? new TransportOption() : getBestXHRTransport());\n    var transport = TransportOption != null && typeof TransportOption !== \"string\" ? new TransportOption() : xhr == undefined ? new FetchTransport() : new XHRTransport();\n    var abortController = undefined;\n    var timeout = 0;\n    var currentState = WAITING;\n    var dataBuffer = \"\";\n    var lastEventIdBuffer = \"\";\n    var eventTypeBuffer = \"\";\n    var textBuffer = \"\";\n    var state = FIELD_START;\n    var fieldStart = 0;\n    var valueStart = 0;\n\n    var onStart = function (status, statusText, contentType, headers) {\n      if (currentState === CONNECTING) {\n        if (status === 200 && contentType != undefined && contentTypeRegExp.test(contentType)) {\n          currentState = OPEN;\n          wasActivity = Date.now();\n          retry = initialRetry;\n          es.readyState = OPEN;\n          var event = new ConnectionEvent(\"open\", {\n            status: status,\n            statusText: statusText,\n            headers: headers\n          });\n          es.dispatchEvent(event);\n          fire(es, es.onopen, event);\n        } else {\n          var message = \"\";\n\n          if (status !== 200) {\n            if (statusText) {\n              statusText = statusText.replace(/\\s+/g, \" \");\n            }\n\n            message = \"EventSource's response has a status \" + status + \" \" + statusText + \" that is not 200. Aborting the connection.\";\n          } else {\n            message = \"EventSource's response has a Content-Type specifying an unsupported type: \" + (contentType == undefined ? \"-\" : contentType.replace(/\\s+/g, \" \")) + \". Aborting the connection.\";\n          }\n\n          close();\n          var event = new ConnectionEvent(\"error\", {\n            status: status,\n            statusText: statusText,\n            headers: headers\n          });\n          es.dispatchEvent(event);\n          fire(es, es.onerror, event);\n          console.error(message);\n        }\n      }\n    };\n\n    var onProgress = function (textChunk) {\n      if (currentState === OPEN) {\n        var n = -1;\n\n        for (var i = 0; i < textChunk.length; i += 1) {\n          var c = textChunk.charCodeAt(i);\n\n          if (c === \"\\n\".charCodeAt(0) || c === \"\\r\".charCodeAt(0)) {\n            n = i;\n          }\n        }\n\n        var chunk = (n !== -1 ? textBuffer : \"\") + textChunk.slice(0, n + 1);\n        textBuffer = (n === -1 ? textBuffer : \"\") + textChunk.slice(n + 1);\n\n        if (textChunk !== \"\") {\n          wasActivity = Date.now();\n          textLength += textChunk.length;\n        }\n\n        for (var position = 0; position < chunk.length; position += 1) {\n          var c = chunk.charCodeAt(position);\n\n          if (state === AFTER_CR && c === \"\\n\".charCodeAt(0)) {\n            state = FIELD_START;\n          } else {\n            if (state === AFTER_CR) {\n              state = FIELD_START;\n            }\n\n            if (c === \"\\r\".charCodeAt(0) || c === \"\\n\".charCodeAt(0)) {\n              if (state !== FIELD_START) {\n                if (state === FIELD) {\n                  valueStart = position + 1;\n                }\n\n                var field = chunk.slice(fieldStart, valueStart - 1);\n                var value = chunk.slice(valueStart + (valueStart < position && chunk.charCodeAt(valueStart) === \" \".charCodeAt(0) ? 1 : 0), position);\n\n                if (field === \"data\") {\n                  dataBuffer += \"\\n\";\n                  dataBuffer += value;\n                } else if (field === \"id\") {\n                  lastEventIdBuffer = value;\n                } else if (field === \"event\") {\n                  eventTypeBuffer = value;\n                } else if (field === \"retry\") {\n                  initialRetry = parseDuration(value, initialRetry);\n                  retry = initialRetry;\n                } else if (field === \"heartbeatTimeout\") {\n                  heartbeatTimeout = parseDuration(value, heartbeatTimeout);\n\n                  if (timeout !== 0) {\n                    clearTimeout(timeout);\n                    timeout = setTimeout(function () {\n                      onTimeout();\n                    }, heartbeatTimeout);\n                  }\n                }\n              }\n\n              if (state === FIELD_START) {\n                if (dataBuffer !== \"\") {\n                  lastEventId = lastEventIdBuffer;\n\n                  if (eventTypeBuffer === \"\") {\n                    eventTypeBuffer = \"message\";\n                  }\n\n                  var event = new MessageEvent(eventTypeBuffer, {\n                    data: dataBuffer.slice(1),\n                    lastEventId: lastEventIdBuffer\n                  });\n                  es.dispatchEvent(event);\n\n                  if (eventTypeBuffer === \"open\") {\n                    fire(es, es.onopen, event);\n                  } else if (eventTypeBuffer === \"message\") {\n                    fire(es, es.onmessage, event);\n                  } else if (eventTypeBuffer === \"error\") {\n                    fire(es, es.onerror, event);\n                  }\n\n                  if (currentState === CLOSED) {\n                    return;\n                  }\n                }\n\n                dataBuffer = \"\";\n                eventTypeBuffer = \"\";\n              }\n\n              state = c === \"\\r\".charCodeAt(0) ? AFTER_CR : FIELD_START;\n            } else {\n              if (state === FIELD_START) {\n                fieldStart = position;\n                state = FIELD;\n              }\n\n              if (state === FIELD) {\n                if (c === \":\".charCodeAt(0)) {\n                  valueStart = position + 1;\n                  state = VALUE_START;\n                }\n              } else if (state === VALUE_START) {\n                state = VALUE;\n              }\n            }\n          }\n        }\n      }\n    };\n\n    var onFinish = function (error) {\n      if (currentState === OPEN || currentState === CONNECTING) {\n        currentState = WAITING;\n\n        if (timeout !== 0) {\n          clearTimeout(timeout);\n          timeout = 0;\n        }\n\n        timeout = setTimeout(function () {\n          onTimeout();\n        }, retry);\n        retry = clampDuration(Math.min(initialRetry * 16, retry * 2));\n        es.readyState = CONNECTING;\n        var event = new ErrorEvent(\"error\", {\n          error: error\n        });\n        es.dispatchEvent(event);\n        fire(es, es.onerror, event);\n\n        if (error != undefined) {\n          console.error(error);\n        }\n      }\n    };\n\n    var close = function () {\n      currentState = CLOSED;\n\n      if (abortController != undefined) {\n        abortController.abort();\n        abortController = undefined;\n      }\n\n      if (timeout !== 0) {\n        clearTimeout(timeout);\n        timeout = 0;\n      }\n\n      es.readyState = CLOSED;\n    };\n\n    var onTimeout = function () {\n      timeout = 0;\n\n      if (currentState !== WAITING) {\n        if (!wasActivity && abortController != undefined) {\n          onFinish(new Error(\"No activity within \" + heartbeatTimeout + \" milliseconds.\" + \" \" + (currentState === CONNECTING ? \"No response received.\" : textLength + \" chars received.\") + \" \" + \"Reconnecting.\"));\n\n          if (abortController != undefined) {\n            abortController.abort();\n            abortController = undefined;\n          }\n        } else {\n          var nextHeartbeat = Math.max((wasActivity || Date.now()) + heartbeatTimeout - Date.now(), 1);\n          wasActivity = false;\n          timeout = setTimeout(function () {\n            onTimeout();\n          }, nextHeartbeat);\n        }\n\n        return;\n      }\n\n      wasActivity = false;\n      textLength = 0;\n      timeout = setTimeout(function () {\n        onTimeout();\n      }, heartbeatTimeout);\n      currentState = CONNECTING;\n      dataBuffer = \"\";\n      eventTypeBuffer = \"\";\n      lastEventIdBuffer = lastEventId;\n      textBuffer = \"\";\n      fieldStart = 0;\n      valueStart = 0;\n      state = FIELD_START; // https://bugzilla.mozilla.org/show_bug.cgi?id=428916\n      // Request header field Last-Event-ID is not allowed by Access-Control-Allow-Headers.\n\n      var requestURL = url;\n\n      if (url.slice(0, 5) !== \"data:\" && url.slice(0, 5) !== \"blob:\") {\n        if (lastEventId !== \"\") {\n          // Remove the lastEventId parameter if it's already part of the request URL.\n          var i = url.indexOf(\"?\");\n          requestURL = i === -1 ? url : url.slice(0, i + 1) + url.slice(i + 1).replace(/(?:^|&)([^=&]*)(?:=[^&]*)?/g, function (p, paramName) {\n            return paramName === lastEventIdQueryParameterName ? '' : p;\n          }); // Append the current lastEventId to the request URL.\n\n          requestURL += (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + lastEventIdQueryParameterName + \"=\" + encodeURIComponent(lastEventId);\n        }\n      }\n\n      var withCredentials = es.withCredentials;\n      var requestHeaders = {};\n      requestHeaders[\"Accept\"] = \"text/event-stream\";\n      var headers = es.headers;\n\n      if (headers != undefined) {\n        for (var name in headers) {\n          if (Object.prototype.hasOwnProperty.call(headers, name)) {\n            requestHeaders[name] = headers[name];\n          }\n        }\n      }\n\n      try {\n        abortController = transport.open(xhr, onStart, onProgress, onFinish, requestURL, withCredentials, requestHeaders);\n      } catch (error) {\n        close();\n        throw error;\n      }\n    };\n\n    es.url = url;\n    es.readyState = CONNECTING;\n    es.withCredentials = withCredentials;\n    es.headers = headers;\n    es._close = close;\n    onTimeout();\n  }\n\n  EventSourcePolyfill.prototype = Object.create(EventTarget.prototype);\n  EventSourcePolyfill.prototype.CONNECTING = CONNECTING;\n  EventSourcePolyfill.prototype.OPEN = OPEN;\n  EventSourcePolyfill.prototype.CLOSED = CLOSED;\n\n  EventSourcePolyfill.prototype.close = function () {\n    this._close();\n  };\n\n  EventSourcePolyfill.CONNECTING = CONNECTING;\n  EventSourcePolyfill.OPEN = OPEN;\n  EventSourcePolyfill.CLOSED = CLOSED;\n  EventSourcePolyfill.prototype.withCredentials = undefined;\n  var R = NativeEventSource;\n\n  if (XMLHttpRequest != undefined && (NativeEventSource == undefined || !(\"withCredentials\" in NativeEventSource.prototype))) {\n    // Why replace a native EventSource ?\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=444328\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=831392\n    // https://code.google.com/p/chromium/issues/detail?id=260144\n    // https://code.google.com/p/chromium/issues/detail?id=225654\n    // ...\n    R = EventSourcePolyfill;\n  }\n\n  setTimeout(function () {\n    if ([\"Asia/Anadyr\", \"Asia/Barnaul\", \"Asia/Chita\", \"Asia/Irkutsk\", \"Asia/Kamchatka\", \"Asia/Khandyga\", \"Asia/Krasnoyarsk\", \"Asia/Magadan\", \"Asia/Novokuznetsk\", \"Asia/Novosibirsk\", \"Asia/Omsk\", \"Asia/Sakhalin\", \"Asia/Srednekolymsk\", \"Asia/Tomsk\", \"Asia/Ust-Nera\", \"Asia/Vladivostok\", \"Asia/Yakutsk\", \"Asia/Yekaterinburg\", \"Europe/Astrakhan\", \"Europe/Kaliningrad\", \"Europe/Kirov\", \"Europe/Moscow\", \"Europe/Samara\", \"Europe/Saratov\", \"Europe/Simferopol\", \"Europe/Ulyanovsk\", \"Europe/Volgograd\", \"W-SU\"].indexOf(new Intl.DateTimeFormat().resolvedOptions().timeZone) === -1) {\n      return;\n    }\n\n    var bold = function (msg) {\n      return \"\\x1b[97m\\x1b[1m\" + msg + \"\\x1b[22m\\x1b[37m\";\n    };\n\n    var flags = function () {\n      return \"🇷🇺  🇺🇦  🇷🇺  🇺🇦  🇷🇺  🇺🇦  🇷🇺  🇺🇦  🇷🇺  🇺🇦  🇷🇺  🇺🇦  🇷🇺  🇺🇦  🇷🇺  🇺🇦  🇷🇺  🇺🇦  🇷🇺  🇺🇦\" + \"  🇷🇺  🇺🇦  🇷🇺  🇺🇦  🇷🇺  🇺🇦\";\n    };\n\n    var s = [\"\", flags(), \"\", \"\\x1b[37m24 февраля \" + bold(\"Россия напала на Украину\") + \".\", \"\", \"Народ Украины всеобще мобилизован и готов защищать свою страну от вражеского\" + \" вторжения. \" + bold(\"91% украинцев полностью поддерживает своего президента Владимира Зеленского\") + \" и его ответные действия на нападение России.\", \"\", \"Весь мир осудил необоснованное вторжение и решил ввести \" + bold(\"невиданные ранее санкции против России\") + \". С каждым новым днем они будут ощущаться все сильнее и сильнее среди мирных\" + \" граждан.\", \"\", \"В то же время, \" + bold(\"российское правительство ограничивает доступ граждан к внешней информации\") + \", насаждая однобокие формулировки и версии происходящего.\", \"\", \"В качестве надежного источника информации загрузите безопасный браузер Tor:\", \"\", bold(\"https://www.torproject.org/\"), \"\", \"И посетите:\", \"\", bold(\"https://www.bbcweb3hytmzhn5d532owbu6oqadra5z3ar726vq5kgwwn6aucdccrad.onion/russian\"), \"\", flags(), \"\", bold(\"Прекратите эту бессмысленную войну! Остановите военного преступника Путина!\") + \"\\x1b[39m\", \"\", flags(), \"\"].join(\"\\n\");\n    alert(s);\n    window.open('http://www.change.org/NetVoyne');\n  }, 15000);\n\n  (function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n      var v = factory(exports);\n      if (v !== undefined) module.exports = v;\n    } else if (typeof define === \"function\" && define.amd) {\n      define([\"exports\"], factory);\n    } else {\n      factory(global);\n    }\n  })(function (exports) {\n    exports.EventSourcePolyfill = EventSourcePolyfill;\n    exports.NativeEventSource = NativeEventSource;\n    exports.EventSource = R;\n  });\n})(typeof globalThis === 'undefined' ? typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : this : globalThis);","map":null,"metadata":{},"sourceType":"script"}