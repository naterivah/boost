{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../service/authenticationservice\";\nimport * as i2 from \"@angular/router\";\n/**\n * @author Nordine Bittich\n */\n\nexport class ErrorInterceptor {\n  authenticationService;\n  router;\n  actRoute;\n\n  constructor(authenticationService, router, actRoute) {\n    this.authenticationService = authenticationService;\n    this.router = router;\n    this.actRoute = actRoute;\n  }\n\n  intercept(request, next) {\n    return next.handle(request).pipe(catchError(err => {\n      let errorMessage = err.error ? err.error.message : err.statusText ? err.statusText : 'Server error';\n      let errorLabel = 'Unexpected Error';\n\n      if (err.status === 401 || err.status === 403) {\n        this.authenticationService.logout();\n        errorLabel = 'Unauthorized';\n        errorMessage = 'Forbidden';\n        this.router.navigate(['/error'], {\n          queryParams: {\n            label: errorLabel,\n            status: err.status,\n            message: errorMessage\n          }\n        });\n      }\n\n      return throwError(err);\n    }));\n  }\n\n  static ɵfac = function ErrorInterceptor_Factory(t) {\n    return new (t || ErrorInterceptor)(i0.ɵɵinject(i1.AuthenticationService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i2.ActivatedRoute));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErrorInterceptor,\n    factory: ErrorInterceptor.ɵfac\n  });\n}","map":null,"metadata":{},"sourceType":"module"}