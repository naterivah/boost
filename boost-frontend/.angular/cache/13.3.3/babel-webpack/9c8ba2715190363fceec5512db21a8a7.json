{"ast":null,"code":"import { HttpParams } from \"@angular/common/http\";\nimport { environment } from \"../../environments/environment\";\nimport { Slugify } from \"../common/slugify\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"./authenticationservice\";\nexport class BookService {\n  http;\n  router;\n  authenticationService;\n\n  constructor(http, router, authenticationService) {\n    this.http = http;\n    this.router = router;\n    this.authenticationService = authenticationService;\n  }\n\n  getBooks(next = datas => console.log(datas), event = 1, pageSize = 10, err = e => console.log(e)) {\n    this.http.get(`${environment.backendUrl}/book?size=${pageSize}&page=${event - 1}`, {}).subscribe(next, err, () => {});\n  }\n\n  searchBookByTitle(title, next = datas => console.log(datas), page = 1, pageSize = 10, err = e => console.log(e)) {\n    this.http.get(`${environment.backendUrl}/book/search/title?size=${pageSize}&page=${page - 1}`, {\n      params: {\n        'title': title\n      }\n    }).subscribe(next, err, () => {});\n  }\n\n  fetchTitles(next, err = e => console.log(e)) {\n    this.http.get(`${environment.backendUrl}/book/titles`, {}).subscribe(next, err, () => {});\n  }\n\n  getTotalDuration(book) {\n    return Math.round(book.totalDuration / 1000 / 60) + ' minutes';\n  }\n\n  bookDetailFor(book, editMode) {\n    this.router.navigateByUrl('/books/' + Slugify.slugify(book.title) + '/' + book.id + '/' + editMode);\n  }\n\n  fetchCountryCode(next, e = err => console.log(err)) {\n    this.http.request('get', `${environment.backendUrl}/book/country-code`, {}).subscribe(next, e, () => {});\n  }\n\n  saveBookToDb(book, next, error = e => console.log(e)) {\n    this.http.request('put', `${environment.backendUrl}/book`, {\n      body: book\n    }).subscribe(next, error, () => {});\n  }\n\n  fetchBook(id, title, next, err = e => console.log(e)) {\n    this.http.request('get', `${environment.backendUrl}/book/${title}/${id}`, {}).subscribe(next, err, () => {});\n  }\n\n  rateBook($event, book, next, err = e => console.log(e)) {\n    console.log(\"from book detail \" + $event.star);\n    let params = new HttpParams().set('bookId', book.id + '').set('star', $event.star + '');\n    this.http.request('post', `${environment.backendUrl}/user/rate`, {\n      params: params\n    }).subscribe(next, err, () => {});\n  }\n\n  getLast3Books(next) {\n    this.http.get(environment.backendUrl + '/book/last', {}).subscribe(next, err => {\n      console.log(err);\n    }, () => {});\n  }\n\n  getTop3Books(next) {\n    this.http.get(environment.backendUrl + '/book/top', {}).subscribe(next, err => {\n      console.log(err);\n    }, () => {});\n  }\n\n  static ɵfac = function BookService_Factory(t) {\n    return new (t || BookService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.AuthenticationService));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BookService,\n    factory: BookService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":null,"metadata":{},"sourceType":"module"}