server:
  port: 8070
spring:
  kafka:
    properties:
      schema:
        registry:
          url: http://localhost:8081
    consumer:
      bootstrap-servers: localhost:9092
      group-id: boost_group_app
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
    producer:
      bootstrap-servers: localhost:9092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      client-id: boost_client_id
  cache:
    type: caffeine
  servlet:
    multipart:
      max-file-size: 1GB
      max-request-size: 1GB
  data:
    web:
      pageable:
        default-page-size: 5
  datasource:
    driver-class-name: org.postgresql.Driver
    password: admin
    url: jdbc:postgresql://localhost/boostdb
    username: postgres
  jpa:
    database: postgresql
    generate-ddl: true
    hibernate:
      ddl-auto: create
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQL9Dialect
        temp:
          use_jdbc_metadata_defaults: false
    show-sql: true
  resources:
    add-mappings: true # remove in case the frontend is running separately
application:
  title: Boost!
  version: v0.0.1-SNAPSHOT
boost:
  event:
    topic: boostevent
  upload:
    dir: /tmp/boost
jwt:
  audience: authenticated-app
  expire:
    after: 600000 # 10 min
  header: Authorization
  issuer: authentication-server
  prefix: Bearer
  secret: Zq4t7w!z%C*F-JaNdRgUkXp2s5u8x/A?D(G+KbPeShVmYq3t6w9y$B&E)H@McQfT
  type: jwt

fixture:
  books:
    size: 2
    delete-at-start: true